/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;
import Model.Application;
import Model.VitalSignHistory;
import Model.Observation;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sruthisivasankar
 */
public class viewJPanel extends javax.swing.JPanel {
    
    private  Application application;
    DefaultTableModel viewtableModel;
    Observation selectObservation;

    /**
     * Creates new form viewJPanel
     */
//    ed
    public viewJPanel(Application application){
        initComponents();
        this.application=application;
        this.viewtableModel=(DefaultTableModel)observationTable.getModel();
        
        displayObservations();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fieldObservationID = new javax.swing.JTextField();
        fieldBloodPressure = new javax.swing.JTextField();
        fieldTemperature = new javax.swing.JTextField();
        UpdateBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        observationTable = new javax.swing.JTable();
        viewObservationBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 204, 204));

        fieldObservationID.setEditable(false);

        fieldBloodPressure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldBloodPressureActionPerformed(evt);
            }
        });

        UpdateBtn.setText("UPDATE OBSERVATION");
        UpdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBtnActionPerformed(evt);
            }
        });

        observationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Temperature", "BP"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(observationTable);

        viewObservationBtn.setText("VIEW DETAILS");
        viewObservationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewObservationBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("ID:");

        jLabel2.setText("Blood Pressure:");

        jLabel3.setText("Temperature:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(UpdateBtn)
                            .addComponent(viewObservationBtn)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(fieldTemperature, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                .addComponent(fieldBloodPressure, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(fieldObservationID, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addGap(209, 209, 209))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldObservationID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(24, 24, 24)
                .addComponent(UpdateBtn)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(viewObservationBtn)
                .addContainerGap(72, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void UpdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBtnActionPerformed
        // TODO add your handling code here:
        if(!fieldObservationID.getText().isEmpty()){
            this.selectObservation.setBloodPressure(Double.valueOf(fieldBloodPressure.getText()));
            this.selectObservation.setTemperature(Double.valueOf(fieldTemperature.getText()));
        }else {
            JOptionPane.showMessageDialog(null, "please select a row");
        }
    }//GEN-LAST:event_UpdateBtnActionPerformed

    private void viewObservationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewObservationBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow=observationTable.getSelectedRow();
        if(selectedRow>=0){
            
            this.selectObservation=(Observation) observationTable.getValueAt(selectedRow, 0);
            fieldObservationID.setText(String.valueOf(selectObservation.getObservationId()));
            fieldBloodPressure.setText(String.valueOf(selectObservation.getBloodPressure()));
            fieldTemperature.setText(String.valueOf(selectObservation.getTemperature()));
        }
        else{
            JOptionPane.showMessageDialog(UpdateBtn, "Please Select Row");
        }
    }//GEN-LAST:event_viewObservationBtnActionPerformed

    private void fieldBloodPressureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldBloodPressureActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldBloodPressureActionPerformed
    public void displayObservations(){
        VitalSignHistory history=this.application.getHistory();
        
        if(history.getVitalSignHistory().isEmpty()){
            for(Observation o:history.getVitalSignHistory()){
                 Object row[]= new Object[3];
                 row[0]=o;
                 row[1]=o.getTemperature();
                 row[2]=o.getBloodPressure();
                 
                 viewtableModel.addRow(row);
                
            }
        } else{
            System.out.println("Empty list");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton UpdateBtn;
    private javax.swing.JTextField fieldBloodPressure;
    private javax.swing.JTextField fieldObservationID;
    private javax.swing.JTextField fieldTemperature;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable observationTable;
    private javax.swing.JButton viewObservationBtn;
    // End of variables declaration//GEN-END:variables
}
